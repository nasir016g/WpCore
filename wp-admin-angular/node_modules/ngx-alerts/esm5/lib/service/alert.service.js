/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/internal/operators';
import { AlertReducer } from './alert.reducer';
var AlertService = /** @class */ (function () {
    function AlertService(config) {
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher
            .pipe(scan(AlertReducer.reduce, []))
            .subscribe(this.state);
    }
    /**
     * @private
     * @return {?}
     */
    AlertService.prototype.initConfig = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    };
    Object.defineProperty(AlertService.prototype, "messages", {
        get: /**
         * @return {?}
         */
        function () {
            return this.state;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.info = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'info' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.danger = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'danger' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.success = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'success' });
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    AlertService.prototype.warning = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.addAlert({ content: msg, type: 'warning' });
    };
    /**
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.close = /**
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
    };
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.addAlert = /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        var _this = this;
        this.dispatcher.next({ fn: AlertReducer.add, alert: alert, config: this.config });
        timer(this.config.timeout)
            .pipe(take(1))
            .subscribe(function () {
            _this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: _this.config });
        });
    };
    AlertService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AlertService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] }] }
    ]; };
    return AlertService;
}());
export { AlertService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.dispatcher;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.state;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hbGVydHMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9hbGVydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsZUFBZSxFQUFjLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDO0lBTUUsc0JBQTBDLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFIckQsZUFBVSxHQUFHLElBQUksT0FBTyxFQUF1RCxDQUFDO1FBQ2hGLFVBQUssR0FBRyxJQUFJLGVBQWUsQ0FBVSxFQUFFLENBQUMsQ0FBQztRQUcvQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVU7YUFDWixJQUFJLENBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQzlCO2FBQ0EsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVPLGlDQUFVOzs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxzQkFBVyxrQ0FBUTs7OztRQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDOzs7T0FBQTs7Ozs7SUFFTSwyQkFBSTs7OztJQUFYLFVBQVksR0FBVztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVNLDZCQUFNOzs7O0lBQWIsVUFBYyxHQUFXO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBRU0sOEJBQU87Ozs7SUFBZCxVQUFlLEdBQVc7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFTSw4QkFBTzs7OztJQUFkLFVBQWUsR0FBVztRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7OztJQUVNLDRCQUFLOzs7O0lBQVosVUFBYSxLQUFZO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDckYsQ0FBQzs7Ozs7O0lBRU8sK0JBQVE7Ozs7O0lBQWhCLFVBQWlCLEtBQVk7UUFBN0IsaUJBUUM7UUFQQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO1FBRWhGLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQzthQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2IsU0FBUyxDQUFDO1lBQ1QsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQXZERixVQUFVOzs7O2dEQU1JLE1BQU0sU0FBQyxZQUFZOztJQWtEbEMsbUJBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXZEWSxZQUFZOzs7Ozs7SUFFdkIsa0NBQXdGOzs7OztJQUN4Riw2QkFBaUQ7Ozs7O0lBRXJDLDhCQUFpRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWxlcnR9IGZyb20gJy4uL21vZGVsL2FsZXJ0Lm1vZGVsJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0FMRVJUX0NPTkZJR30gZnJvbSAnLi4vYWxlcnQuY29uZmlnJztcbmltcG9ydCB7QWxlcnRDb25maWd9IGZyb20gJy4uL21vZGVsL2FsZXJ0LWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQge3NjYW4sIHRha2V9IGZyb20gJ3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzJztcbmltcG9ydCB7QWxlcnRSZWR1Y2VyfSBmcm9tICcuL2FsZXJ0LnJlZHVjZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxlcnRTZXJ2aWNlIHtcblxuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgU3ViamVjdDx7IGZuOiBGdW5jdGlvbiwgYWxlcnQ6IEFsZXJ0LCBjb25maWc6IEFsZXJ0Q29uZmlnIH0+KCk7XG4gIHByaXZhdGUgc3RhdGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEFsZXJ0W10+KFtdKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEFMRVJUX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEFsZXJ0Q29uZmlnKSB7XG4gICAgdGhpcy5pbml0Q29uZmlnKCk7XG4gICAgdGhpcy5kaXNwYXRjaGVyXG4gICAgICAucGlwZShcbiAgICAgICAgc2NhbihBbGVydFJlZHVjZXIucmVkdWNlLCBbXSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodGhpcy5zdGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRDb25maWcoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5jb25maWcudGltZW91dCA9ICEhdGhpcy5jb25maWcudGltZW91dCA/IHRoaXMuY29uZmlnLnRpbWVvdXQgOiA1MDAwO1xuICAgIHRoaXMuY29uZmlnLm1heE1lc3NhZ2VzID0gISF0aGlzLmNvbmZpZy5tYXhNZXNzYWdlcyA/IHRoaXMuY29uZmlnLm1heE1lc3NhZ2VzIDogNTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWVzc2FnZXMoKTogT2JzZXJ2YWJsZTxBbGVydFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGU7XG4gIH1cblxuICBwdWJsaWMgaW5mbyhtc2c6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuYWRkQWxlcnQoe2NvbnRlbnQ6IG1zZywgdHlwZTogJ2luZm8nfSk7XG4gIH1cblxuICBwdWJsaWMgZGFuZ2VyKG1zZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnZGFuZ2VyJ30pO1xuICB9XG5cbiAgcHVibGljIHN1Y2Nlc3MobXNnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICdzdWNjZXNzJ30pO1xuICB9XG5cbiAgcHVibGljIHdhcm5pbmcobXNnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICd3YXJuaW5nJ30pO1xuICB9XG5cbiAgcHVibGljIGNsb3NlKGFsZXJ0OiBBbGVydCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KHtmbjogQWxlcnRSZWR1Y2VyLnJlbW92ZSwgYWxlcnQ6IGFsZXJ0LCBjb25maWc6IHRoaXMuY29uZmlnfSk7XG4gIH1cblxuICBwcml2YXRlIGFkZEFsZXJ0KGFsZXJ0OiBBbGVydCk6IHZvaWQge1xuICAgIHRoaXMuZGlzcGF0Y2hlci5uZXh0KHtmbjogQWxlcnRSZWR1Y2VyLmFkZCwgYWxlcnQ6IGFsZXJ0LCBjb25maWc6IHRoaXMuY29uZmlnfSk7XG5cbiAgICB0aW1lcih0aGlzLmNvbmZpZy50aW1lb3V0KVxuICAgICAgLnBpcGUodGFrZSgxKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7Zm46IEFsZXJ0UmVkdWNlci5yZW1vdmUsIGFsZXJ0OiBhbGVydCwgY29uZmlnOiB0aGlzLmNvbmZpZ30pO1xuICAgICAgfSk7XG4gIH1cbn1cbiJdfQ==