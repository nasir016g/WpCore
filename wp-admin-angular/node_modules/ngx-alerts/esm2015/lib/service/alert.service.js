/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/internal/operators';
import { AlertReducer } from './alert.reducer';
export class AlertService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher
            .pipe(scan(AlertReducer.reduce, []))
            .subscribe(this.state);
    }
    /**
     * @private
     * @return {?}
     */
    initConfig() {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    }
    /**
     * @return {?}
     */
    get messages() {
        return this.state;
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    info(msg) {
        this.addAlert({ content: msg, type: 'info' });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    danger(msg) {
        this.addAlert({ content: msg, type: 'danger' });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    success(msg) {
        this.addAlert({ content: msg, type: 'success' });
    }
    /**
     * @param {?} msg
     * @return {?}
     */
    warning(msg) {
        this.addAlert({ content: msg, type: 'warning' });
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    close(alert) {
        this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
    }
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    addAlert(alert) {
        this.dispatcher.next({ fn: AlertReducer.add, alert: alert, config: this.config });
        timer(this.config.timeout)
            .pipe(take(1))
            .subscribe(() => {
            this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
        });
    }
}
AlertService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AlertService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.dispatcher;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.state;
    /**
     * @type {?}
     * @private
     */
    AlertService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1hbGVydHMvIiwic291cmNlcyI6WyJsaWIvc2VydmljZS9hbGVydC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUMsZUFBZSxFQUFjLE9BQU8sRUFBRSxLQUFLLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRTdDLE9BQU8sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDbkQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBRzdDLE1BQU0sT0FBTyxZQUFZOzs7O0lBS3ZCLFlBQTBDLE1BQW1CO1FBQW5CLFdBQU0sR0FBTixNQUFNLENBQWE7UUFIckQsZUFBVSxHQUFHLElBQUksT0FBTyxFQUF1RCxDQUFDO1FBQ2hGLFVBQUssR0FBRyxJQUFJLGVBQWUsQ0FBVSxFQUFFLENBQUMsQ0FBQztRQUcvQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxDQUFDLFVBQVU7YUFDWixJQUFJLENBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQzlCO2FBQ0EsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVPLFVBQVU7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7Ozs7SUFFRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7Ozs7O0lBRU0sSUFBSSxDQUFDLEdBQVc7UUFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsR0FBVztRQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7OztJQUVNLE9BQU8sQ0FBQyxHQUFXO1FBQ3hCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Ozs7O0lBRU0sT0FBTyxDQUFDLEdBQVc7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDakQsQ0FBQzs7Ozs7SUFFTSxLQUFLLENBQUMsS0FBWTtRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Ozs7OztJQUVPLFFBQVEsQ0FBQyxLQUFZO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFFaEYsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDYixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztRQUNyRixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQXZERixVQUFVOzs7OzRDQU1JLE1BQU0sU0FBQyxZQUFZOzs7Ozs7O0lBSGhDLGtDQUF3Rjs7Ozs7SUFDeEYsNkJBQWlEOzs7OztJQUVyQyw4QkFBaUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FsZXJ0fSBmcm9tICcuLi9tb2RlbC9hbGVydC5tb2RlbCc7XG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCwgdGltZXJ9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtBTEVSVF9DT05GSUd9IGZyb20gJy4uL2FsZXJ0LmNvbmZpZyc7XG5pbXBvcnQge0FsZXJ0Q29uZmlnfSBmcm9tICcuLi9tb2RlbC9hbGVydC1jb25maWcubW9kZWwnO1xuaW1wb3J0IHtzY2FuLCB0YWtlfSBmcm9tICdyeGpzL2ludGVybmFsL29wZXJhdG9ycyc7XG5pbXBvcnQge0FsZXJ0UmVkdWNlcn0gZnJvbSAnLi9hbGVydC5yZWR1Y2VyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsZXJ0U2VydmljZSB7XG5cbiAgcHJpdmF0ZSBkaXNwYXRjaGVyID0gbmV3IFN1YmplY3Q8eyBmbjogRnVuY3Rpb24sIGFsZXJ0OiBBbGVydCwgY29uZmlnOiBBbGVydENvbmZpZyB9PigpO1xuICBwcml2YXRlIHN0YXRlID0gbmV3IEJlaGF2aW9yU3ViamVjdDxBbGVydFtdPihbXSk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChBTEVSVF9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBBbGVydENvbmZpZykge1xuICAgIHRoaXMuaW5pdENvbmZpZygpO1xuICAgIHRoaXMuZGlzcGF0Y2hlclxuICAgICAgLnBpcGUoXG4gICAgICAgIHNjYW4oQWxlcnRSZWR1Y2VyLnJlZHVjZSwgW10pXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0Q29uZmlnKCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5jb25maWcpIHtcbiAgICAgIHRoaXMuY29uZmlnID0ge307XG4gICAgfVxuICAgIHRoaXMuY29uZmlnLnRpbWVvdXQgPSAhIXRoaXMuY29uZmlnLnRpbWVvdXQgPyB0aGlzLmNvbmZpZy50aW1lb3V0IDogNTAwMDtcbiAgICB0aGlzLmNvbmZpZy5tYXhNZXNzYWdlcyA9ICEhdGhpcy5jb25maWcubWF4TWVzc2FnZXMgPyB0aGlzLmNvbmZpZy5tYXhNZXNzYWdlcyA6IDU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IG1lc3NhZ2VzKCk6IE9ic2VydmFibGU8QWxlcnRbXT4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlO1xuICB9XG5cbiAgcHVibGljIGluZm8obXNnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICdpbmZvJ30pO1xuICB9XG5cbiAgcHVibGljIGRhbmdlcihtc2c6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuYWRkQWxlcnQoe2NvbnRlbnQ6IG1zZywgdHlwZTogJ2Rhbmdlcid9KTtcbiAgfVxuXG4gIHB1YmxpYyBzdWNjZXNzKG1zZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnc3VjY2Vzcyd9KTtcbiAgfVxuXG4gIHB1YmxpYyB3YXJuaW5nKG1zZzogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnd2FybmluZyd9KTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZShhbGVydDogQWxlcnQpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7Zm46IEFsZXJ0UmVkdWNlci5yZW1vdmUsIGFsZXJ0OiBhbGVydCwgY29uZmlnOiB0aGlzLmNvbmZpZ30pO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRBbGVydChhbGVydDogQWxlcnQpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7Zm46IEFsZXJ0UmVkdWNlci5hZGQsIGFsZXJ0OiBhbGVydCwgY29uZmlnOiB0aGlzLmNvbmZpZ30pO1xuXG4gICAgdGltZXIodGhpcy5jb25maWcudGltZW91dClcbiAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLm5leHQoe2ZuOiBBbGVydFJlZHVjZXIucmVtb3ZlLCBhbGVydDogYWxlcnQsIGNvbmZpZzogdGhpcy5jb25maWd9KTtcbiAgICAgIH0pO1xuICB9XG59XG4iXX0=