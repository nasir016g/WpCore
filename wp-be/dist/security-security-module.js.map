{"version":3,"sources":["webpack:///./src/app/security/role/role-list.component.html","webpack:///./src/app/security/role/role-list.component.ts","webpack:///./src/app/security/role/role.service.ts","webpack:///./src/app/security/security-routing.module.ts","webpack:///./src/app/security/security.module.ts","webpack:///./src/app/security/user/user-details.component.html","webpack:///./src/app/security/user/user-details.component.ts","webpack:///./src/app/security/user/user-list.component.html","webpack:///./src/app/security/user/user-list.component.ts","webpack:///./src/app/security/user/user.model.ts","webpack:///./src/app/security/user/user.service.ts"],"names":[],"mappings":"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","file":"security-security-module.js","sourcesContent":["module.exports = \"\\r\\n<div class=\\\"card card-body bg-light\\\" *ngIf=\\\"roles\\\">\\r\\n<form [formGroup]=\\\"newRoleForm\\\" (ngSubmit)=\\\"createRole()\\\" class=\\\"form-inline\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <!-- <label class=\\\"control-label\\\" for=\\\"roleName\\\">Create new role</label> -->\\r\\n      <input formControlName=\\\"roleName\\\" placeholder=\\\"Role name\\\" class=\\\"form-control\\\">\\r\\n    </div>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-secondary\\\">Create New Role</button>\\r\\n  </form>\\r\\n</div>\\r\\n<div class=\\\"col-md-6\\\">    \\r\\n      \\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <th class=\\\"text-left\\\">Existing Roles\\r\\n          </th>\\r\\n          <th>\\r\\n          </th>\\r\\n        </tr>\\r\\n        <tr *ngFor=\\\"let role of roles\\\">\\r\\n          <td class=\\\"text-left\\\">\\r\\n            {{role.name}}\\r\\n          </td>\\r\\n          <td *ngIf=\\\"!role.isSystemRole\\\" class=\\\"float-right\\\">\\r\\n            <button class=\\\"btn btn-outline-danger\\\" (click)=\\\"deleteRole(role)\\\">Delete</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { RoleService } from './role.service';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { RoleModel } from '../user/user.model';\r\n\r\n@Component({\r\n  selector: 'app-role-list',\r\n  templateUrl: './role-list.component.html'\r\n})\r\nexport class RoleListComponent implements OnInit {\r\n  roles: RoleModel[];\r\n  newRoleForm: FormGroup;\r\n\r\n  constructor(private roleService: RoleService) { }\r\n\r\n  ngOnInit() {\r\n    this.getRoles();\r\n  }\r\n\r\n  buildForm(){\r\n    this.newRoleForm = new FormGroup({\r\n      roleName: new FormControl('', [Validators.required])\r\n    });\r\n  }\r\n\r\n  getRoles(){\r\n    this.roleService.getRoles().subscribe(\r\n      (rez) => {\r\n        this.roles = rez;        \r\n        this.buildForm();\r\n       },\r\n      err => { \r\n        console.log(err.error)\r\n      }\r\n    )\r\n  }\r\n\r\n  deleteRole(role: string){\r\n    this.roleService.delete(role).subscribe(() => {\r\n      this.getRoles();\r\n    })\r\n  }\r\n\r\n  createRole(){\r\n    if(!this.newRoleForm.valid){\r\n      return;\r\n    }\r\n    const postedRole = this.newRoleForm.controls['roleName'].value as string;\r\n    this.roleService.create(postedRole).subscribe((rez) => {\r\n      this.getRoles();\r\n      this.buildForm();\r\n    })\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\nimport { RoleModel } from '../user/user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RoleService {\r\n  url = environment.apiUrl + 'admin/security/roles';\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getRoles(){\r\n     return this.http.get<RoleModel[]>(this.url);\r\n  }\r\n\r\n  delete(role: string)\r\n  {\r\n    return this.http.delete(this.url + '/' + role);\r\n  }\r\n\r\n  create(roleName: string){\r\n    return this.http.post(this.url + '/' + roleName, null);\r\n    // const headers = new HttpHeaders().set('Content-type', 'application/json');\r\n    // return this.http.post(this.url, JSON.stringify(roleName)\r\n    //   , {headers: headers  }\r\n    //  )\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AuthGuard } from '../shared/guard/auth.guard';\nimport { RoleListComponent } from './role/role-list.component';\nimport { UserListComponent } from './user/user-list.component';\nimport { UserDetailsComponent } from './user/user-details.component';\nimport { LoginComponent } from '../account/login.component';\n\nconst routes: Routes = [\n  { path: 'roles', canActivate: [AuthGuard], component: RoleListComponent },\n  { path: 'users', canActivate: [AuthGuard], component: UserListComponent },\n  { path: 'users/edit/:userName', canActivate: [AuthGuard], component: UserDetailsComponent },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class SecurityRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { SecurityRoutingModule } from './security-routing.module';\nimport { RoleListComponent } from './role/role-list.component';\nimport { UserListComponent } from './user/user-list.component';\nimport { UserDetailsComponent } from './user/user-details.component';\n\n@NgModule({\n  declarations: [\n    RoleListComponent,\n    UserListComponent,\n    UserDetailsComponent,\n  ],\n  imports: [\n    SharedModule,\n    SecurityRoutingModule    \n  ]\n})\nexport class SecurityModule { }\n","module.exports = \"<p></p>\\r\\n<div class=\\\"col-md-6\\\">\\r\\n  <form>\\r\\n    <div class=\\\"form-group row\\\">\\r\\n      <label for=\\\"name\\\" class=\\\"col-sm-2 col-form-label\\\">Name</label>\\r\\n      <div class=\\\"col-sm-10\\\">\\r\\n        <input type=\\\"text\\\" readonly class=\\\"form-control\\\" name=\\\"name\\\" [(ngModel)]=\\\"model.name\\\">\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"form-group row\\\">\\r\\n      <label for=\\\"roles\\\" class=\\\"col-sm-2 col-form-label\\\">Roles</label>\\r\\n      <div class=\\\"col-sm-2\\\" >\\r\\n\\r\\n        <div class=\\\"form-check float-left\\\" *ngFor=\\\"let role of model.roles\\\">\\r\\n         \\r\\n              <label class=\\\"form-check-label\\\">\\r\\n                  <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [checked]=\\\"role.isChecked\\\" (change)=\\\"role.isChecked = !role.isChecked\\\" >{{role.name}}\\r\\n                </label>        \\r\\n          </div>  \\r\\n           \\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group row\\\">\\r\\n      <div class=\\\"col-sm-4 offset-sm-2\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"update()\\\">Save</button>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </form>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { UserModel } from './user.model';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UserService } from './user.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-user-details',\r\n  templateUrl: './user-details.component.html',\r\n  styles: []\r\n})\r\nexport class UserDetailsComponent implements OnInit {\r\n  model: UserModel = new UserModel();\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private userService: UserService) {\r\n    if (this.activatedRoute.snapshot.params['userName']) {\r\n      this.model.name = this.activatedRoute.snapshot.params['userName'];\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getUser();\r\n  }\r\n\r\n  getUser() {\r\n    if (this.model.name != null) {\r\n      // edit\r\n      this.userService.getUserByName(this.model.name)\r\n        .subscribe(rez => {\r\n          this.model = rez;          \r\n        }\r\n          , error => console.log(error));\r\n    }\r\n  }\r\n\r\n  update()  {\r\n    console.log(this.model);\r\n    this.userService.update(this.model).subscribe((rez) => {\r\n      this.getUser();\r\n    })\r\n  }\r\n}\r\n","module.exports = \"<div class=\\\"card card-body bg-light\\\" *ngIf=\\\"users\\\">\\r\\n  <form [formGroup]=\\\"newUserForm\\\" (ngSubmit)=\\\"createUser()\\\" class=\\\"form-inline\\\">\\r\\n    <div class=\\\"form-group\\\">\\r\\n      <!-- <label class=\\\"control-label\\\" for=\\\"roleName\\\">Create new role</label> -->\\r\\n      <input formControlName=\\\"userName\\\" placeholder=\\\"User name\\\" class=\\\"form-control\\\">\\r\\n      <input formControlName=\\\"password\\\" placeholder=\\\"Password\\\" class=\\\"form-control\\\">\\r\\n    </div>\\r\\n    <button type=\\\"submit\\\" class=\\\"btn btn-secondary\\\">Create New Account</button>\\r\\n  </form>\\r\\n</div>\\r\\n<div class=\\\"col-md-6\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n      <table class=\\\"table\\\">\\r\\n        <tr>\\r\\n          <th class=\\\"text-left\\\">Name\\r\\n          </th>\\r\\n          <th>\\r\\n          </th>\\r\\n        </tr>\\r\\n        <tr *ngFor=\\\"let user of users\\\">\\r\\n          <td class=\\\"text-left\\\">\\r\\n            {{user.name}}\\r\\n          </td>\\r\\n          <td class=\\\"float-right\\\">\\r\\n              <a [routerLink]=\\\"['/security/users/edit', user.name]\\\"> Edit</a>    \\r\\n            <button class=\\\"btn btn-link\\\" (click)=\\\"deleteUser(user)\\\">Delete</button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UserService } from './user.service';\nimport { UserModel } from './user.model';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html'\n})\nexport class UserListComponent implements OnInit {\n  users: UserModel[];\n  newUserForm: FormGroup;\n\n  constructor(private userService: UserService) { }\n\n  ngOnInit() {\n    this.getUsers();\n  }\n\n  buildForm(){\n    this.newUserForm = new FormGroup({\n      userName: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n\n  getUsers(){\n    this.userService.getUsers().subscribe(\n      (rez) => {\n        this.users = rez;        \n        this.buildForm();\n       },\n      err => { \n        console.log(err.error)\n      }\n    )\n  }\n\n  deleteUser(user: UserModel){\n    this.userService.delete(user.name).subscribe(() => {\n      this.getUsers();\n    })\n  }\n\n  createUser(){\n    if(!this.newUserForm.valid){\n      return;\n    }\n    const postedUser = new UserModel();\n    postedUser.name = this.newUserForm.controls['userName'].value as string;\n    postedUser.password = this.newUserForm.controls['password'].value as string;\n    this.userService.create(postedUser).subscribe((rez) => {\n      this.users.push(postedUser);\n      this.buildForm();\n    })\n  }\n\n}","\r\nexport class UserModel {\r\n    name: string;\r\n    password: string;\r\n    roles: RoleModel[];\r\n    selectedRoles: string[];\r\n}\r\n\r\nexport class RoleModel {\r\n    name: string;\r\n    isSystemRole: boolean;\r\n    isChecked: boolean;\r\n}\r\n ","import { Injectable } from '@angular/core';\r\nimport { environment } from '../../../environments/environment';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { UserModel } from './user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  url = environment.apiUrl + 'admin/security/users';\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUsers(){\r\n    console.log(\"get users\");\r\n     return this.http.get<UserModel[]>(this.url);\r\n  }\r\n\r\n  getUserByName(userName: string) {\r\n    return this.http.get<UserModel>(this.url + '/' + userName)\r\n  }\r\n\r\n  delete(userName: string)\r\n  {\r\n    return this.http.delete(this.url + '/' + userName);\r\n  }\r\n\r\n  create(userModel: UserModel){\r\n    //return this.http.post(this.url + '/' + roleName, null);\r\n     const headers = new HttpHeaders().set('Content-type', 'application/json');\r\n     return this.http.post(this.url, JSON.stringify(userModel)\r\n      , {headers: headers  }\r\n     )\r\n  }\r\n\r\n  update(userModel: UserModel){\r\n    //return this.http.post(this.url + '/' + roleName, null);\r\n     const headers = new HttpHeaders().set('Content-type', 'application/json');\r\n     return this.http.post(this.url, JSON.stringify(userModel)\r\n      , {headers: headers  }\r\n     )\r\n  }\r\n}\r\n"],"sourceRoot":""}